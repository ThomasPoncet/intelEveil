import org.openhab.core.library.types.*
import org.joda.time.*
import org.openhab.model.script.actions.Timer

/**
 * Global variables
 */
var Timer wakeUpTimer
var Timer musicVolUpTimer
val Number musicVolMin = 40
val Number musicVolMax = 256
val Number musicVolStep = 8
val Integer musicVolUpWait = 6
val String tvChannel = "12"
var Integer loopIncr = 0

/**
 * ------ INIT RULE ------
 */
rule "Initialization rule"
when
	System started
then
	sendCommand(UserState, "Out")
	executeCommandLine('vlc &') // Starting VLC
	postUpdate(TVState, "Off")
end
/**
 * ------ SHUT DOWN RULE ------
 */
rule "Initialization rule"
when
	System shuts down
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh quit') // Shutting down VLC
end


/**
 * ------ USER SCENARIO RULES ------
 */
/**
 * When the user has to get up
 */
rule "User has to get up"
when
	Item UserState changed to WakingUp1
then
	postUpdate(MusicState, "DoPlay")
	sendCommand(CoffeeMachine, ON)
	sendCommand(Heater, ON)
	sendCommand(Light, ON)
end
/**
 * When the user get up
 */
rule "User get up"
when
	Item UserState changed to WakingUp2
then
	postUpdate(MusicState, "DoPause")
	postUpdate(TVState, "TurnOn")
	sendCommand(Blind, ON)
end
/**
 * When the user go out
 */
rule "User go out"
when
	Item UserState changed to Out
then
	sendCommand(ControlledObjects, OFF)
	// VLC stop
	// TV stop
end
/**
 * When the user go to sleep
 */
rule "User go to sleep"
when
	Item UserState changed to Sleeping
then
	postUpdate(MusicState, "DoInit")
end

/**
 * ------ SENSOR INTERPRETATION RULES ------
 */
/**
 * When the bed is occupied (closed when it is occupied)
 */
rule "Bed is occupied"
when
	Item BedState changed to CLOSED
then
	if (UserState.state == "Out"){
		sendCommand(UserState, "Sleeping")
	} else if (UserState.state == "WakingUp2"){
		sendCommand(UserState, "WakingUp1")
	}
end
/**
 * When the bed is no more occupied (closed when it is occupied)
 */
rule "Bed is no more occupied"
when
	Item BedState changed to OPEN
then
	if (UserState.state == "Sleeping"){
		sendCommand(UserState, "Out")
	} else if (UserState.state == "WakingUp1"){
		sendCommand(UserState, "WakingUp2")
	}
end
/**
 * When the font door is open
 */
rule "Front door open"
when
	Item FrontDoor changed to OPEN
then
	if (UserState.state == "WakingUp2"){
		sendCommand(UserState, "Out")
	}
end

/**
 * ------ WAKE UP INFO CONTROLER RULES ------
 */
/**
 * Parsing wake up informations : date;music;channel
 */
rule "parse wake up infos"
when
	Item WakeUpInfos received command
then
	var String[] infos = WakeUpInfos.state.toString().split(';')
	postUpdate(WakeUpTimeStr, infos.get(0))
	postUpdate(MusicName, infos.get(1))
	postUpdate(TVChannel, infos.get(2))
end
 /**
  * Parsing time from IFTTT format to DateTime format
  */
rule "Convert time"
when
	Item WakeUpTimeStr received command
then
	callScript("iftttdatetimeformat")
end
/**
 * When we are close to a wake up time
 */
rule "IFTTT Update"
when
	Item WakeUpTime received update
then
	// If a timer is already there (a wake up is waiting), we cancel it and prioritize the new wake up time
	if(wakeUpTimer!=null) {
		logInfo("wakeUpTimmer", "canceling wakeUpTimmer")
        wakeUpTimer.cancel()
        wakeUpTimer = null
    }
    // If the wake up time (-1min) is in the past
	if (now.isAfter(new DateTime((WakeUpTime.state as DateTimeType).calendar.timeInMillis).minusMinutes(1))){
		if (UserState.state == "Sleeping") {
			sendCommand(UserState, "WakingUp1")
		}
	} else {
		// We wait for the time to be the wake up time
		logInfo("wakeUpTimmer", "setting up wakeUpTimmer")
		wakeUpTimer = createTimer(new DateTime((WakeUpTime.state as DateTimeType).calendar.timeInMillis)) [|
			logInfo("wakeUpTimmer", "ending wakeUpTimmer")
			if (UserState.state == "Sleeping") {
				sendCommand(UserState, "WakingUp1")
			}
        ]
	}
end

/**
* ------ CONTROLLED OBJECTS RULES ------
*/
/**
* Rule to send the command COFFEEON to the Control Arduino
*/
rule "Coffee Machine on"
when
	Item CoffeeMachine received command ON
then
	sendCommand(ArduinoControl, "COFFEEON;")
end
/**
* Rule to send the command COFFEEOFF to the Control Arduino
*/
rule "Coffee Machine off"
when
	Item CoffeeMachine received command OFF
then
	sendCommand(ArduinoControl, "COFFEEOFF;")
end
/**
* Rule to send the command LIGHTON to the Control Arduino
*/
rule "Light on"
when
	Item Light received command ON
then
	sendCommand(ArduinoControl, "LIGHTON;")
end
/**
* Rule to send the command LIGHTOFF to the Control Arduino
*/
rule "Light off"
when
	Item Light received command OFF
then
	sendCommand(ArduinoControl, "LIGHTOFF;")
end
/**
* Rule to send the command HEATERON to the Control Arduino
*/
rule "Heater on"
when
	Item Heater received command ON
then
	sendCommand(ArduinoControl, "HEATERON;")
end
/**
* Rule to send the command HEATEROFF to the Control Arduino
*/
rule "Heater off"
when
	Item Heater received command OFF
then
	sendCommand(ArduinoControl, "HEATEROFF;")
end
/**
* Rule to send the command BLINDON to the Control Arduino
*/
rule "Blind on"
when
	Item Blind received command ON
then
	sendCommand(ArduinoControl, "BLINDON;")
end
/**
* Rule to send the command BLINDOFF to the Control Arduino
*/
rule "Blind off"
when
	Item Blind received command OFF
then
	sendCommand(ArduinoControl, "BLINDOFF;")
end

/**
 * ------ MULTIMEDIA RULES ------
 */
rule "Init Music"
when
	Item MusicState changed to DoInit
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh clear')
	executeCommandLine('./configurations/vlcSocketPlayer.sh enqueue sounds/CoursePoursuite.mp3')
	// VLC limitation : forced to play to set volume...
	executeCommandLine('./configurations/vlcSocketPlayer.sh play')
	executeCommandLine('./configurations/vlcSocketPlayer.sh volume '+musicVolMin.toString())
	executeCommandLine('./configurations/vlcSocketPlayer.sh stop')
	postUpdate(MusicVolume, musicVolMin)
	postUpdate(MusicState, "Stop")
end
rule "Play music from Stop"
when
	Item MusicState changed from Stop to DoPlay
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh play')
	postUpdate(MusicState, "Playing")
	if ((MusicVolume.state as DecimalType) < musicVolMax){
		sendCommand(MusicVolume, MusicVolume.state as DecimalType + musicVolStep)
	}
end
rule "Play music from Pause"
when
	Item MusicState changed from Pause to DoPlay
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh pause')
	postUpdate(MusicState, "Playing")
	if ((MusicVolume.state as DecimalType) < musicVolMax){
		sendCommand(MusicVolume, MusicVolume.state as DecimalType + musicVolStep)
	}
end
rule "Pause Music"
when
	Item MusicState changed from Playing to DoPause
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh pause')
	postUpdate(MusicState, "Pause")
end
rule "Music Vol Up"
when
	Item MusicVolume received command
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh volume '+MusicVolume.state.toString())
	if (((MusicVolume.state as DecimalType) < musicVolMax) && (MusicState.state == "Playing")){
		musicVolUpTimer = createTimer(now.plusSeconds(musicVolUpWait)) [|
			sendCommand(MusicVolume, MusicVolume.state as DecimalType + musicVolStep)
        ]
	}
end
rule "Turn TV on"
when
	Item TVState changed from Off to TurnOn
then
	sendCommand(ArduinoControl, "TVONOFF;")
	while (loopIncr < tvChannel.length){
		sendCommand(ArduinoControl, "TV"+tvChannel.charAt(loopIncr)+";")
		loopIncr = loopIncr+1
	}
	postUpdate(TVState, "On")
end
rule "Turn TV off"
when
	Item TVState changed from On to TurnOff
then
	sendCommand(ArduinoControl, "TVONOFF;")
	postUpdate(TVState, "Off")
end

/**
 * Rule when pressure sensor is pressed or unpressd
 */
rule "Pressure sensor pressed or unpressed"
when
	Item ArduinoSensors changed
then
	if (ArduinoSensors.state.toString().contains("PRESSURE1")){
		postUpdate(BedState, CLOSED)
 	} else if (ArduinoSensors.state.toString().contains("PRESSURE0")){
		postUpdate(BedState, OPEN)
 	}
end



/**
 * IT SHOULD WORK... We've got to search on that...
 */

///**
// * Rule when pressure sensor is pressed
// */
//rule "Pressure sensor pressed"
//when
//				Item ArduinoPressureSensor changed from PRESSURE0 to PRESSURE1
//then
//				logInfo("SensorPressed","Pressure Sensor has been pressed")
//				sendCommand(CoffeeMachine, ON)
//end
//
//
///**
// * Rule when pressure sensor is unpressed
// */
//rule "Pressure sensor unpressed"
//when
//				Item ArduinoPressureSensor changed from PRESSURE1 to PRESSURE0
//then
//				logInfo("SensorUnPressed","Pressure Sensor has been unpressed")
//				sendCommand(CoffeeMachine, OFF)
//end
