import org.openhab.core.library.types.*
import org.joda.time.*
import org.openhab.model.script.actions.Timer

/**
 * Global variables
 */
var Timer wakeUpTimer
var Timer musicVolUpTimer
val Number musicVolMin = 40
val Number musicVolMax = 256
val Number musicVolStep = 8
val Integer musicVolUpWait = 6
var Integer loopIncr = 0

/**
 * ------ INIT RULE ------
 */
rule "Initialization rule"
when
	System started
then
	sendCommand(SystemOnOff, ON)
	postUpdate(UserState, "WakedUp")
//	executeCommandLine('vlc &') // Starting VLC
	postUpdate(MusicState, "Started")
	postUpdate(TVState, "Off")
end
/**
 * ------ SHUT DOWN RULE ------
 */
rule "Initialization rule"
when
	System shuts down
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh quit') // Shutting down VLC
end


/**
 * ------ USER SCENARIO RULES ------
 */
/**
 * When the user has to get up
 */
rule "User has to get up"
when
	Item UserState changed from Sleeping to WakingUp1
then
	postUpdate(MusicState, "DoInitAndPlay")
	sendCommand(CoffeeMachine, ON)
	sendCommand(Heater, ON)
	sendCommand(Light, ON)
end
/**
 * When the user come back to bed
 */
rule "User come back to bed"
when
	Item UserState changed from WakingUp2 to WakingUp1
then
	postUpdate(MusicState, "DoPlay")
	postUpdate(TVState, "TurnOff")
end
/**
 * When the user get up
 */
rule "User get up"
when
	Item UserState changed from WakingUp1 to WakingUp2
then
	postUpdate(MusicState, "DoPause")
	postUpdate(TVState, "TurnOn")
	sendCommand(Blind, ON)
end
/**
 * When the user go out
 */
rule "User go out"
when
	Item UserState changed from WakingUp2 to WakedUp or
	Item UserState changed to SystemOff
then
	sendCommand(ControlledObjects, OFF)
	postUpdate(MusicState, "DoStop")
	postUpdate(TVState, "TurnOff")
end
/**
 * When the user turn off the system
 */
rule "User turn off system"
when
	Item SystemOnOff received command OFF
then
	postUpdate(UserState, "SystemOff")
end
/**
 * When the user turn on the system
 */
rule "User turn off system"
when
	Item SystemOnOff received command ON
then
	if (BedState.state == CLOSED) {
		postUpdate(UserState, "Sleeping")
	} else {
		postUpdate(UserState, "WakedUp")
	}
end

/**
 * ------ SENSOR INTERPRETATION RULES ------
 */
/**
 * When the bed is occupied (closed when it is occupied)
 */
rule "Bed is occupied"
when
	Item BedState changed to CLOSED
then
	if (UserState.state == "WakedUp"){
		postUpdate(UserState, "Sleeping")
	} else if (UserState.state == "WakingUp2"){
		postUpdate(UserState, "WakingUp1")
	}
end
/**
 * When the bed is no more occupied (closed when it is occupied)
 */
rule "Bed is no more occupied"
when
	Item BedState changed to OPEN
then
	if (UserState.state == "Sleeping"){
		postUpdate(UserState, "WakedUp")
	} else if (UserState.state == "WakingUp1"){
		postUpdate(UserState, "WakingUp2")
	}
end
/**
 * When the font door is open
 */
rule "Front door open"
when
	Item FrontDoor changed to OPEN
then
	if (UserState.state == "WakingUp2"){
		sendCommand(UserState, "WakedUp")
	}
end

/**
 * ------ WAKE UP INFO RULES ------
 */
/**
 * Parsing wake up informations : date;music;channel
 */
rule "parse wake up infos"
when
	Item WakeUpInfos received command
then
	var String[] infos = WakeUpInfos.state.toString().split(';')
	postUpdate(WakeUpTimeStr, infos.get(0))
	postUpdate(MusicName, infos.get(1))
	postUpdate(TVChannel, infos.get(2))
end
 /**
  * Parsing time from IFTTT format to DateTime format
  */
rule "Convert time"
when
	Item WakeUpTimeStr received update
then
	callScript("iftttdatetimeformat")
end
/**
 * When we are close to a wake up time
 */
rule "IFTTT Update"
when
	Item WakeUpTime received update
then
	// If a timer is already there (a wake up is waiting), we cancel it and prioritize the new wake up time
	if(wakeUpTimer!=null) {
		logInfo("wakeUpTimmer", "canceling wakeUpTimmer")
        wakeUpTimer.cancel()
        wakeUpTimer = null
    }
    // If the wake up time (-1min) is in the past
	if (now.isAfter(new DateTime((WakeUpTime.state as DateTimeType).calendar.timeInMillis).minusMinutes(1))){
		if (UserState.state == "Sleeping") {
			postUpdate(UserState, "WakingUp1")
		}
	} else {
		// We wait for the time to be the wake up time
		logInfo("wakeUpTimmer", "setting up wakeUpTimmer")
		wakeUpTimer = createTimer(new DateTime((WakeUpTime.state as DateTimeType).calendar.timeInMillis)) [|
			logInfo("wakeUpTimmer", "ending wakeUpTimmer")
			if (UserState.state == "Sleeping") {
				postUpdate(UserState, "WakingUp1")
			}
        ]
	}
end

/**
* ------ CONTROLLED OBJECTS RULES ------
*/
/**
* Rule to send the command COFFEEON to the Control Arduino
*/
rule "Coffee Machine on"
when
	Item CoffeeMachine received command ON
then
	sendCommand(ArduinoControl, "COFFEEON;")
end
/**
* Rule to send the command COFFEEOFF to the Control Arduino
*/
rule "Coffee Machine off"
when
	Item CoffeeMachine received command OFF
then
	sendCommand(ArduinoControl, "COFFEEOFF;")
end
/**
* Rule to send the command LIGHTON to the Control Arduino
*/
rule "Light on"
when
	Item Light received command ON
then
	sendCommand(ArduinoControl, "LIGHTON;")
end
/**
* Rule to send the command LIGHTOFF to the Control Arduino
*/
rule "Light off"
when
	Item Light received command OFF
then
	sendCommand(ArduinoControl, "LIGHTOFF;")
end
/**
* Rule to send the command HEATERON to the Control Arduino
*/
rule "Heater on"
when
	Item Heater received command ON
then
	sendCommand(ArduinoControl, "HEATERON;")
end
/**
* Rule to send the command HEATEROFF to the Control Arduino
*/
rule "Heater off"
when
	Item Heater received command OFF
then
	sendCommand(ArduinoControl, "HEATEROFF;")
end
/**
* Rule to send the command BLINDON to the Control Arduino
*/
rule "Blind on"
when
	Item Blind received command ON
then
	sendCommand(ArduinoControl, "BLINDON;")
end
/**
* Rule to send the command BLINDOFF to the Control Arduino
*/
rule "Blind off"
when
	Item Blind received command OFF
then
	sendCommand(ArduinoControl, "BLINDOFF;")
end

/**
 * ------ MULTIMEDIA RULES ------
 */
rule "Init Music"
when
	Item MusicState changed to DoInit
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh clear')
	executeCommandLine('./configurations/vlcSocketPlayer.sh enqueue sounds/'+MusicName.state.toString())
	// VLC limitation : forced to play to set volume...
	executeCommandLine('./configurations/vlcSocketPlayer.sh play')
	executeCommandLine('./configurations/vlcSocketPlayer.sh volume '+musicVolMin.toString())
	executeCommandLine('./configurations/vlcSocketPlayer.sh stop')
	postUpdate(MusicVolume, musicVolMin)
	postUpdate(MusicState, "Stop")
end
rule "Init and play Music"
when
	Item MusicState changed to DoInitAndPlay
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh clear')
	executeCommandLine('./configurations/vlcSocketPlayer.sh enqueue sounds/'+MusicName.state.toString())
	// VLC limitation : forced to play to set volume...
	executeCommandLine('./configurations/vlcSocketPlayer.sh play')
	executeCommandLine('./configurations/vlcSocketPlayer.sh volume '+musicVolMin.toString())
	postUpdate(MusicVolume, musicVolMin)
	postUpdate(MusicState, "Playing")
	if ((MusicVolume.state as DecimalType) < musicVolMax){
		sendCommand(MusicVolume, MusicVolume.state as DecimalType + musicVolStep)
	}
end
rule "Play music from Stop"
when
	Item MusicState changed from Stop to DoPlay
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh play')
	postUpdate(MusicState, "Playing")
	if ((MusicVolume.state as DecimalType) < musicVolMax){
		sendCommand(MusicVolume, MusicVolume.state as DecimalType + musicVolStep)
	}
end
rule "Play music from Pause"
when
	Item MusicState changed from Pause to DoPlay
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh pause')
	postUpdate(MusicState, "Playing")
	if ((MusicVolume.state as DecimalType) < musicVolMax){
		sendCommand(MusicVolume, MusicVolume.state as DecimalType + musicVolStep)
	}
end
rule "Pause Music"
when
	Item MusicState changed from Playing to DoPause
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh pause')
	postUpdate(MusicState, "Pause")
end
rule "Stop Music from Playing"
when
	Item MusicState changed from Playing to DoStop
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh stop')
	postUpdate(MusicState, "Stop")
end
rule "Stop Music from Pause"
when
	Item MusicState changed from Pause to DoStop
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh pause')
	executeCommandLine('./configurations/vlcSocketPlayer.sh stop')
	postUpdate(MusicState, "Stop")
end
/**
 * To increase music volume, by musicVolStep, every musicVolUpWait seconds
 */
rule "Music Vol Up"
when
	Item MusicVolume received command
then
	executeCommandLine('./configurations/vlcSocketPlayer.sh volume '+MusicVolume.state.toString())
	if (((MusicVolume.state as DecimalType) < musicVolMax) && (MusicState.state == "Playing")){
		musicVolUpTimer = createTimer(now.plusSeconds(musicVolUpWait)) [|
			sendCommand(MusicVolume, MusicVolume.state as DecimalType + musicVolStep)
        ]
	}
end
rule "Turn TV on"
when
	Item TVState changed from Off to TurnOn
then
	sendCommand(ArduinoControl, "TVONOFF;")
	while (loopIncr < TVChannel.state.toString().length){
		sendCommand(ArduinoControl, "TV"+TVChannel.state.toString().charAt(loopIncr)+";")
		loopIncr = loopIncr+1
	}
	postUpdate(TVState, "On")
end
rule "Turn TV off"
when
	Item TVState changed from On to TurnOff
then
	sendCommand(ArduinoControl, "TVONOFF;")
	postUpdate(TVState, "Off")
end
rule "Turn TV on when already on"
when
	Item TVState changed from On to TurnOn
then
	postUpdate(TVState, "On")
end
rule "Turn TV off when already off"
when
	Item TVState changed from Off to TurnOff
then
	postUpdate(TVState, "Off")
end

/**
 * Rule when pressure sensor is pressed or unpressd
 */
rule "Pressure sensor pressed or unpressed"
when
	Item ArduinoSensors changed
then
	if (ArduinoSensors.state.toString().contains("Press:Low")){
		postUpdate(BedState, OPEN)
 	} else if (ArduinoSensors.state.toString().contains("Press:High")){
		postUpdate(BedState, CLOSED)
 	}
end
