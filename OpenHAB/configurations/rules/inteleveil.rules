


/**
 * ------ INIT RULE ------
 */
rule "Initialization rule"
when
	System started
then
	sendCommand(UserState, "Out")
end


/**
 * ------ USER SCENARIO RULES ------
 */
/**
 * When the user has to get up
 */
rule "User has to get up"
when
	Item UserState changed to WakingUp1
then
	sendCommand(CoffeeMachine, ON)
	sendCommand(Heater, ON)
	sendCommand(Light, ON)
	// Vlc play
end
/**
 * When the user get up
 */
rule "User get up"
when
	Item UserState changed to WakingUp2
then
	sendCommand(Blind, ON)
	// TVon
	// Vlc pause
end
/**
 * When the user go out
 */
rule "User go out"
when
	Item UserState changed to Out
then
	sendCommand(ControlledObjects, OFF)
	// VLC stop
	// TV stop
end

/**
 * ------ SENSOR INTERPRETATION RULES ------
 */
/**
 * When the bed is occupied (closed when it is occupied)
 */
rule "Bed is occupied"
when
	Item BedState changed to CLOSED
then
	if (UserState.state == "Out"){
		sendCommand(UserState, "Sleeping")
	} else if (UserState.state == "WakingUp2"){
		sendCommand(UserState, "WakingUp1")
	}
end
/**
 * When the bed is no mor occupied (closed when it is occupied)
 */
rule "Bed is no more occupied"
when
	Item BedState changed to OPEN
then
	if (UserState.state == "Sleeping"){
		sendCommand(UserState, "Out")
	} else if (UserState.state == "WakingUp1"){
		sendCommand(UserState, "WakingUp2")
	}
end
/**
 * When the font door is open
 */
rule "Front door open"
when
	Item FrontDoor changed to OPEN
then
	if (UserState.state == "WakingUp2"){
		sendCommand(UserState, "Out")
	}
end

/**
* ------ CONTROLLED OBJECTS RULES ------
*/
/**
* Rule to send the command COFFEEON to the Control Arduino
*/
rule "Coffee Machine on"
when
	Item CoffeeMachine received command ON
then
	sendCommand(ArduinoControl, "COFFEEON;")
end
/**
* Rule to send the command COFFEEOFF to the Control Arduino
*/
rule "Coffee Machine off"
when
	Item CoffeeMachine received command OFF
then
	sendCommand(ArduinoControl, "COFFEEOFF;")
end
/**
* Rule to send the command LIGHTON to the Control Arduino
*/
rule "Light on"
when
	Item Light received command ON
then
	sendCommand(ArduinoControl, "LIGHTON;")
end
/**
* Rule to send the command LIGHTOFF to the Control Arduino
*/
rule "Light off"
when
	Item Light received command OFF
then
	sendCommand(ArduinoControl, "LIGHTOFF;")
end
/**
* Rule to send the command HEATERON to the Control Arduino
*/
rule "Heater on"
when
	Item Heater received command ON
then
	sendCommand(ArduinoControl, "HEATERON;")
end
/**
* Rule to send the command HEATEROFF to the Control Arduino
*/
rule "Heater off"
when
	Item Heater received command OFF
then
	sendCommand(ArduinoControl, "HEATEROFF;")
end
/**
* Rule to send the command BLINDON to the Control Arduino
*/
rule "Blind on"
when
	Item Blind received command ON
then
	sendCommand(ArduinoControl, "BLINDON;")
end
/**
* Rule to send the command BLINDOFF to the Control Arduino
*/
rule "Blind off"
when
	Item Blind received command OFF
then
	sendCommand(ArduinoControl, "BLINDOFF;")
end


/**
 * Rule when pressure sensor is pressed or unpressd
 */
rule "Pressure sensor pressed or unpressed"
when
	Item ArduinoSensors changed
then
	if (ArduinoSensors.state.toString().contains("PRESSURE1")){
		postUpdate(BedState, CLOSED)
		executeCommandLine('./configurations/vlcSocketPlayer.sh pause')
 	} else if (ArduinoSensors.state.toString().contains("PRESSURE0")){
		postUpdate(BedState, OPEN)
		executeCommandLine('./configurations/vlcSocketPlayer.sh pause')
 	}
end



/**
 * IT SHOULD WORK... We've got to search on that...
 */

///**
// * Rule when pressure sensor is pressed
// */
//rule "Pressure sensor pressed"
//when
//				Item ArduinoPressureSensor changed from PRESSURE0 to PRESSURE1
//then
//				logInfo("SensorPressed","Pressure Sensor has been pressed")
//				sendCommand(CoffeeMachine, ON)
//end
//
//
///**
// * Rule when pressure sensor is unpressed
// */
//rule "Pressure sensor unpressed"
//when
//				Item ArduinoPressureSensor changed from PRESSURE1 to PRESSURE0
//then
//				logInfo("SensorUnPressed","Pressure Sensor has been unpressed")
//				sendCommand(CoffeeMachine, OFF)
//end
